


一，正文
正则表达式从左往右进行计算，并遵循优选级顺序。
运算符的顺序：
转义 > 圆括号/方括号 > 限定符 > 定位点和序列 > |(或操作)
定位点和序列(位置和顺序): ^, $, \任何元字符、任何字符
^ 表示匹配输入字符串的开始位置
如: ^[0-9]+abc$ 
表示匹配以一个或者多个数字开头并于abc字母结尾的文本
二，非打印字符
\s 匹配任何空白字符
\S 匹配任何非空白字符
三，特殊字符(有特殊含义的字符)
.（点） 匹配除换行符\n之外的任何单字符
       ^ 匹配输入字符串的开始位置，如果在方括号表达式中使用，表示不接受该字符串的结合
如："ajdlabcdr".match(/[^abc]/g) 返回 ["j", "d", "l", "d", "r"] 表示返回不含有abc的字符
() 表示一个子表达式的开始和结束位置,
[] 标记一个中括号表达式的开始和结束
{} 标识限定符表达式的开始和结束
()和[]的区别: ()表示一组数据，而[]是单个数据
$,*,+,-等
四，限定符：
? 表示匹配 0个或者1个字符
*  表示匹配0个或者多个字符
+ 表示一个或者多个
{n} 表示确定的n次字符串
{n,} 表示至少匹配的次数
{n,m} 表示匹配之间的次数
表示的是通配符的前一个字符或者式
如runoo+b: 可以匹配runoob,runooob等
    runoo?b: 可以匹配runoob,runob
    runoo*b: 可以匹配runob,runoob,runooob等
ps: *和+都是贪婪的，即尽可能的匹配文字。
五，定位符
^ 匹配输入字符串开始的位置。
& 匹配输入字符串结束的位置
\b 匹配一个字边界
\B 匹配一个非字边界
定位符不能和限定符一起使用。
六，字符族
[a-z]: 表示匹配所有的小写字母
[A-Z]: 表示匹配所有的大写字母
[a-zA-Z]: 表示匹配所有的字母
[0-9]: 表示匹配所有的数字
七，元字符(在正则表达式中有特殊含义的字符，可以是一组或者一个)
\: 转义
^: 匹配开始位置，位于[]内部则是排除符
(?:pattern): 匹配pattren但不获取结果，"industr(?:y|ies)"就比"industry|industries"好
(?=pattern): 正向肯定预查,也是非获取匹配
(?!pattern): 正向反向预查
(?:pattern)和(?=pattern)的区别; (?:pattern)会包含()中的字符串，而(?:pattern 则不会包含)
例如："windows2000".match(/windows(?:2000|2005)/)匹配的是“windows2000”
    "windows2000".match(/windows(?=2000|2005)/)匹配的是"windows"
\b: 匹配一个单词边界--即指单词和空格之间的位置 
例如：“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”;
